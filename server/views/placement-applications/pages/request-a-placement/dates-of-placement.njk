{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "../../../components/formFields/form-page-day-weeks-input/macro.njk" import formPageDaysAndWeeksInput %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}

{% extends "../../layout.njk" %}

{% macro fieldset(index, includeButton = false) %}
    {% call govukFieldset({
        classes: "govuk-fieldset toplevel-fieldset",
        legend: {
            text: "ROTL placement " + (
            index + 1),
            classes: "govuk-fieldset__legend govuk-fieldset__legend--m"
        },
        attributes: {
            "data-fieldset": index
        }
    }) %}
        {% set fieldPrefix = "datesOfPlacement[" + index + "]" %}
        {% set fieldName = fieldPrefix + '[arrivalDate]' %}
        {% set dayFieldName = "datesOfPlacement[" + index + "][arrivalDate-day]" %}
        {% set monthFieldName = "datesOfPlacement[" + index + "][arrivalDate-month]" %}
        {% set yearFieldName = "datesOfPlacement[" + index + "][arrivalDate-year]" %}
        {% set fieldId = "datesOfPlacement_" + index + "_arrivalDate" %}
        {% set context = fetchContext() %}
        {% set body = context.page.body %}
        {% set durationDays = "durationDays" %}

        {% set durationDaysName = "datesOfPlacement[" + index + "][" + durationDays + "]" %}
        {% set isFlexibleName = "datesOfPlacement[" + index + "][isFlexible]" %}

        {% set arrivalDateDay = "arrivalDate-day" %}
        {% set arrivalDateMonth = "arrivalDate-month" %}
        {% set arrivalDateYear = "arrivalDate-year" %}

        {{ govukDateInput({
            id: fieldName,
            fieldset: {
                legend: {
                    text: "When will the person arrive?",
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: [
                {
                    classes: "govuk-input--width-2 ",
                    id: fieldId + '[day]',
                    name: dayFieldName,
                    label: 'Day',
                    value: context.datesOfPlacement[index][arrivalDateDay]
                },
                {
                    classes: "govuk-input--width-2 ",
                    id: fieldId + '[month]',
                    name: monthFieldName,
                    label: 'Month',
                    value: context.datesOfPlacement[index][arrivalDateMonth]

                },
                {
                    classes: "govuk-input--width-4 ",
                    id: fieldId + '[year]',
                    name: yearFieldName,
                    label: 'Year',
                    value: context.datesOfPlacement[index][arrivalDateYear]
                }
            ],
            errorMessage: errors[fieldId],
            hint: {
                text: "For example, 27 3 2024"
            }
        }) }}

        {%  set isFlexibleValue = context.datesOfPlacement[index].isFlexible %}

        {{ govukRadios({
            idPrefix: isFlexibleName,
            name: isFlexibleName,
            fieldset: {
                legend: {
                    text: 'Is this date flexible?',
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: [{text:'Yes',value:'yes', checked:isFlexibleValue=='yes'},{text:'No',value:'no',checked:isFlexibleValue=='no'}],
            errorMessage: errors["datesOfPlacement_" + index + "_isFlexible"]
        }) }}

        {% set durationFieldId = "datesOfPlacement_" + index + "_duration" %}
        {% set hasDurationErrors = errors[durationFieldId].text %}

        {% if hasDurationErrors %}
            {% set wrapperClasses = "govuk-form-group govuk-form-group--error" %}
            {% set inputClasses = "govuk-input--width-2 govuk-input--error" %}
        {% else %}
            {% set wrapperClasses = "govuk-form-group" %}
            {% set inputClasses = "govuk-input--width-2" %}
        {% endif %}

        {% set durationFieldName = fieldPrefix + '[duration]' %}
        <div class="{{ wrapperClasses }}" id="{{ durationFieldId }}">

            {% call govukFieldset({
                legend: {
                    text: 'How long should the Approved Premises placement last?',
                    classes: legendClasses
                }
            }) %}

                {% if hasDurationErrors %}
                    <p id="{{ durationFieldId }}-error" class="govuk-error-message"
                       data-cy-error-{{ durationFieldId }}="true">
                        <span class="govuk-visually-hidden">Error:</span>
                        {{ errors[durationFieldId].text }}
                    </p>
                {% endif %}

                {{ govukInput(
                    {
                        classes: inputClasses,
                        name: durationDaysName,
                        id: "datesOfPlacement_" + index + "_duration_days",
                        formGroup: {
                        classes: "govuk-form-group--inline"
                    },
                        label: {
                        text: "Nights"
                    },
                        value: context.datesOfPlacement[index].durationDays
                    },
                    context
                ) }}
            {% endcall %}
        </div>



        {% if includeButton %}
            {{ addButton() }}
        {% endif %}

    {% endcall %}
{% endmacro %}

{% macro addButton() %}
    {{ govukButton({
        text: "Remove",
        attributes: {
            "data-remove-input": "true"
        },
        classes: "govuk-button govuk-button--secondary moj-add-another__remove-button",
        preventDoubleClick: true
    }) }}
{% endmacro %}

{% block content %}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        <form action="{{ paths.placementApplications.pages.update({ id: placementApplicationId, task: task, page: page.name }) }}?_method=PUT"
              method="post">
            <h1 class="govuk-heading-l">
                {{ page.title }}
            </h1>

            {% if errorSummary | length %}
                {{ govukErrorSummary({
                    titleText: "There is a problem",
                    errorList: errorSummary
                }) }}
            {% endif %}
            <input type="hidden" name="_csrf" value="{{ csrfToken }}" />

            <div id="fieldset-wrapper">
                {% for i in range(0, 5) -%}
                    {{ fieldset(i, true) }}
                {% endfor %}
            </div>

            {{ govukButton({
                text: "Add another placement",
                attributes: {
                    "data-add-input": "true"
                },
                classes: "govuk-button--secondary",
                preventDoubleClick: true
            }) }}

            {{ govukButton({
                text: "Save and continue",
                preventDoubleClick: true
            }) }}

        </form>

    </div>
</div>

    {% endblock %}

    {% block extraScripts %}
        <script type="text/javascript" nonce="{{ cspNonce }}">
          function initializeAddButton() {
            var addButton = document.querySelector('button[data-add-input]')

            addButton.addEventListener('click', (event) => {
              var fieldsets = document.querySelectorAll('.toplevel-fieldset')
              var hiddenFieldsets = document.querySelectorAll('fieldset[class*="govuk-visually-hidden"]')

              if (hiddenFieldsets.length) {
                hiddenFieldsets[0]
                  .classList
                  .remove('govuk-visually-hidden')
              } else {
                var fieldsetWrapper = document.querySelector('#fieldset-wrapper')
                var newFieldset = `{{ fieldset("INDEX", true) }}`
                  .replace('INDEX1', fieldsets.length + 1)
                  .replaceAll('INDEX', fieldsets.length + 1)
                fieldsetWrapper.innerHTML += newFieldset

                var removeButtons = fieldsetWrapper.querySelectorAll('button[data-remove-input]')
                initializeRemoveButtons(removeButtons)
              }

              event.preventDefault()
            })
          }

          function initializeRemoveButtons(buttons) {
            for (let i = 0; i < buttons.length; i++) {

              buttons[i].addEventListener('click', (event) => {
                var fieldset = event.target.parentElement
                var inputs = fieldset.querySelectorAll('input')

                fieldset
                  .classList
                  .add('govuk-visually-hidden')

                for (var i = 0; i < inputs.length; i++) {
                  inputs[i].value = ''
                }

                event.preventDefault()
              })
            }
          }

          function initializeFieldsets() {
            var fieldsets = document.querySelectorAll('fieldset[data-fieldset]')

            for (let i = 1; i < fieldsets.length; i++) {
              if(!['arrivalDate-day','arrivalDate-month','arrivalDate-year','durationDays','isFlexible'].some((field) => {
                console.log('checking field',field, `input[name="datesOfPlacement[${i}][${field}]"]`, document.querySelector(`input[name="datesOfPlacement[${i}][${field}]"]`).type)
                const input = document.querySelector(`input[name="datesOfPlacement[${i}][${field}]"]`)
                return Boolean(input.type === 'radio' ? input.checked : input.value)
              })) {
                fieldsets[i]
                  .classList
                  .add('govuk-visually-hidden')
              }
              fieldsets[i].innerHTML += `{{ addButton() }}`
            }

            var removeButtons = document.querySelectorAll('button[data-remove-input]')

            initializeAddButton()
            initializeRemoveButtons(removeButtons)
          }

          initializeFieldsets()
        </script>
    {% endblock %}
