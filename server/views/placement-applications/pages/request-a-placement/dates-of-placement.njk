{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "../../../components/formFields/form-page-day-weeks-input/macro.njk" import formPageDaysAndWeeksInput %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}

{% extends "../../layout.njk" %}

{% macro dateBlock(index) %}
    {% call govukFieldset({
        classes: "govuk-fieldset toplevel-fieldset moj-add-another__item",
        legend: {
            text: "ROTL placement " + (index + 1),
            classes: "govuk-fieldset__legend govuk-fieldset__legend--m"
        },
        attributes: {
            "data-fieldset": index
        }
    }) %}
        {% set fieldPrefix = "datesOfPlacement[" + index + "]" %}
        {% set fieldId = "datesOfPlacement_" + index %}
        {% set context = fetchContext() %}
        {% set body = context.page.body %}

        {{ govukDateInput({
            id: fieldId + '_arrivalDate',
            fieldset: {
                legend: {
                    text: "When will the person arrive?",
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: [
                {
                    classes: "govuk-input--width-2 ",
                    id: fieldId + '_arrivalDate_day',
                    name: fieldPrefix + "[arrivalDate-day]",
                    label: 'Day',
                    value: context.datesOfPlacement[index]["arrivalDate-day"]
                },
                {
                    classes: "govuk-input--width-2 ",
                    id: fieldId + '_arrivalDate_month',
                    name: fieldPrefix + "[arrivalDate-month]",
                    label: 'Month',
                    value: context.datesOfPlacement[index]["arrivalDate-month"]

                },
                {
                    classes: "govuk-input--width-4 ",
                    id: fieldId+ '_arrivalDate_year',
                    name: fieldPrefix + "[arrivalDate-year]",
                    label: 'Year',
                    value: context.datesOfPlacement[index]["arrivalDate-year"]
                }
            ],
            errorMessage: errors[fieldId+"_arrivalDate"],
            hint: {
                text: "For example, 27 3 2024"
            }
        }) }}

        {% set isFlexibleValue = context.datesOfPlacement[index].isFlexible %}

        {{ govukRadios({
            idPrefix: fieldId + '_isFlexible',
            name: fieldPrefix + "[isFlexible]",
            fieldset: {
                legend: {
                    text: 'Is this date flexible?',
                    classes: "govuk-fieldset__legend--s"
                }
            },
            items: [{text:'Yes',value:'yes', checked:isFlexibleValue=='yes'},{text:'No',value:'no',checked:isFlexibleValue=='no'}],
            errorMessage: errors[fieldId + "_isFlexible"]
        }) }}

        {% set durationFieldId = fieldId + "_duration" %}
        {% set hasDurationErrors = errors[durationFieldId].text %}

        {% set inputErrorClasses = "" %}
        {% set wrapperErrorClasses = "" %}
        {% if hasDurationErrors %}
            {% set inputErrorClasses = " govuk-input--error" %}
            {% set wrapperErrorClasses = " govuk-form-group--error" %}
        {% endif %}

        <div class="govuk-form-group {{ wrapperErrorClasses }}"
             id="{{ durationFieldId }}">

            {% call govukFieldset({
                legend: {
                    text: 'How long should the Approved Premises placement last?',
                    classes: "govuk-fieldset__legend--s"
                }
            }) %}

                {% if hasDurationErrors %}
                    <p id="{{ durationFieldId }}-error" class="govuk-error-message"
                       data-cy-error-{{ durationFieldId }}="true">
                        <span class="govuk-visually-hidden">Error:</span>
                        {{ errors[durationFieldId].text }}
                    </p>
                {% endif %}

                {{ govukInput(
                    {
                        classes: "govuk-input--width-2" + inputErrorClasses,
                        name: "datesOfPlacement[" + index + "][durationWeeks]",
                        id: "datesOfPlacement_" + index + "_duration_weeks",
                        formGroup: {
                        classes: "govuk-form-group--inline"
                    },
                        label: {
                        text: "Weeks"
                    },
                        value:  context.datesOfPlacement[index]["durationWeeks"]
                    },
                    context
                ) }}

                {{ govukInput(
                    {
                        classes: "govuk-input--width-2" + inputErrorClasses,
                        name: fieldPrefix + "[durationDays]",
                        id: "datesOfPlacement_" + index + "_duration_days",
                        formGroup: {
                        classes: "govuk-form-group--inline"
                    },
                        label: {
                        text: "Days"
                    },
                        value: context.datesOfPlacement[index]["durationDays"]
                    },
                    context
                ) }}
            {% endcall %}
        </div>


        {% if index !== 0 %}
            {{ addButton() }}
        {% endif %}

    {% endcall %}
{% endmacro %}

{% macro addButton() %}
    {{ govukButton({
        text: "Remove",
        attributes: {
            "data-remove-input": "true"
        },
        classes: "govuk-button govuk-button--secondary moj-add-another__remove-button",
        preventDoubleClick: true
    }) }}
{% endmacro %}

{% block content %}

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            <form action="{{ paths.placementApplications.pages.update({ id: placementApplicationId, task: task, page: page.name }) }}?_method=PUT"
                  method="post">
                <h1 class="govuk-heading-l">
                    {{ page.title }}
                </h1>

                {% if errorSummary | length %}
                    {{ govukErrorSummary({
                        titleText: "There is a problem",
                        errorList: errorSummary
                    }) }}
                {% endif %}
                <input type="hidden" name="_csrf" value="{{ csrfToken }}" />

                <div id="fieldset-wrapper">
                    {% for i in range(0, 5) -%}
                        {{ dateBlock(i, i > 0) }}
                    {% endfor %}
                </div>

                {{ govukButton({
                    text: "Add another placement",
                    attributes: {
                        "data-add-input": "true"
                    },
                    classes: "govuk-button--secondary",
                    preventDoubleClick: true
                }) }}

                {{ govukButton({
                    text: "Save and continue",
                    preventDoubleClick: true
                }) }}

            </form>

        </div>
    </div>

{% endblock %}

    {% block extraScripts %}
        <script type="text/javascript" nonce="{{ cspNonce }}">

          const addHandler = (event) => {
            event.preventDefault()
            let nextIndex = 0
            document.querySelectorAll('fieldset[data-fieldset]').forEach((el) => {
              const index = Number(el.getAttribute('data-fieldset'))
              nextIndex = Math.max(nextIndex, index + 1)
            })

            const newFieldset = `{{ dateBlock('INDEX') }}`.replaceAll('INDEX1', nextIndex + 1).replaceAll('INDEX', nextIndex)
            const fieldSet = document.createElement('div')
            fieldSet.innerHTML = newFieldset

            fieldSet.querySelector('button[data-remove-input]').addEventListener('click', removeHandler)
            document.querySelector('#fieldset-wrapper').appendChild(fieldSet.children[0])
          }

          const removeHandler = (event) => {
            event.preventDefault()
            event.target.closest('.toplevel-fieldset').remove()
            reLabel()
          }

          function reLabel() {
            document.querySelectorAll('fieldset[data-fieldset] > legend').forEach((legend, index) => {
              legend.innerText = `ROTL placement ${index + 1}`
            })
          }

          function initialize() {
            document.querySelectorAll('fieldset[data-fieldset]').forEach((fieldSet,index) => {
              const inputs = fieldSet.querySelectorAll('input')
              if (index > 0 && ![...inputs].some((input) => Boolean(input.type === 'radio' ? input.checked : input.value))) fieldSet.remove()
            })

            document.querySelector('button[data-add-input]').addEventListener('click', addHandler)

            document.querySelectorAll('button[data-remove-input]').forEach((button) => {
              button.addEventListener('click', removeHandler)
            })
            reLabel()
          }

          initialize()
        </script>
    {% endblock %}
