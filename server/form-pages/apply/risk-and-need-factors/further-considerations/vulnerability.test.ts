import { YesOrNo } from '@approved-premises/ui'
import { itShouldHaveNextValue, itShouldHavePreviousValue } from '../../../shared'

import Vulnerability from './vulnerability'

describe('Vulnerability', () => {
  const body = {
    exploitable: 'yes' as YesOrNo,
    exploitableDetail: 'Risk to staff detail',
    exploitOthers: 'yes' as YesOrNo,
    exploitOthersDetail: 'Exploit others detail',
  }

  describe('body', () => {
    it('should set the body', () => {
      const page = new Vulnerability(body)

      expect(page.body).toEqual(body)
    })
  })

  itShouldHaveNextValue(new Vulnerability(body), 'previous-placements')
  itShouldHavePreviousValue(new Vulnerability(body), 'room-sharing')

  describe('errors', () => {
    it('should return errors when yes/no questions are blank', () => {
      const page = new Vulnerability({})

      expect(page.errors()).toEqual({
        exploitOthers:
          'You must specify if there is any evidence or expectation that the person may groom, radicalise or exploit others',
        exploitable: 'You must specify if you are aware that the person is vulnerable to exploitation from others',
      })
    })

    it('shows errors when a question has a yes response, but the details are left out', () => {
      const page = new Vulnerability({ ...body, exploitOthersDetail: '' })

      expect(page.errors()).toEqual({
        exploitOthersDetail:
          'You must specify details about if there is any evidence or expectation that the person may groom, radicalise or exploit others',
      })
    })
  })

  describe('response', () => {
    it('Adds detail to an answer when the answer is yes', () => {
      const page = new Vulnerability(body)

      expect(page.response()).toEqual({
        'Are you aware that the person is vulnerable to exploitation from others?': 'Yes - Risk to staff detail',
        'Is there any evidence or expectation that the person may groom, radicalise or exploit others?':
          'Yes - Exploit others detail',
      })
    })

    it('does not add detail to questions with a no answer', () => {
      body.exploitOthers = 'no'

      const page = new Vulnerability(body)

      expect(page.response()).toEqual({
        'Are you aware that the person is vulnerable to exploitation from others?': 'Yes - Risk to staff detail',
        'Is there any evidence or expectation that the person may groom, radicalise or exploit others?': 'No',
      })
    })
  })
})
