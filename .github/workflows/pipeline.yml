name: Pipeline [test -> build -> deploy]

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        type: choice
        required: true
        options:
          - test
          - dev
          - preprod
          - prod
        default: 'dev'
      version:
        description: Image version
        type: string
        required: true
      docker_registry:
        description: Docker registry
        required: true
        default: 'ghcr.io'
        type: choice
        options:
          - 'ghcr.io'
          - 'quay.io'
      registry_org:
        description: Docker registry organisation
        required: true
        default: 'ministryofjustice'
        type: choice
        options:
          - 'ministryofjustice'
          - 'hmpps'
      additional_docker_tag:
        description: Additional docker tag that can be used to specify stable tags
        required: false
        default: ''
        type: string
      push:
        description: Push docker image to registry flag
        required: true
        default: true
        type: boolean
      docker_multiplatform:
        description: docker multiplatform build or not
        required: true
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  node_build:
    name: "Node Build 🛠️"
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/node_build.yml@v2
    with:
      node_version_file: '.node-version'
    secrets: inherit

  type_checking:
    name: "Type check 🔎"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run typecheck

  linting:
    name: "Linting 🔎"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint checks
        run: npm run lint

      - name: Run shell scripts lint checks
        run: npm run shellcheck

  helm_lint:
    name: "Helm config linting 🔎"
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/test_helm_lint.yml@v2
    strategy:
      matrix:
        environments: [ 'dev', 'test', 'preprod', 'prod' ]

  unit_test:
    name: "Unit testing 🧪"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit tests
        run: npm run test:ci

      - name: Check coverage
        run: |
          npx nyc report -t ./coverage --reporter=text --reporter=text-summary
          npx nyc check-coverage -t ./coverage


  integration_test:
    name: "Integration testing 🧪"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [ 1, 2, 3, 4 ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build source
        run: npm run build

      - name: Download test reports from previous runs
        uses: dawidd6/action-download-artifact@v6
        with:
          branch: main
          if_no_artifact_found: 'ignore'
          allow_forks: false
          name: integration-test-junit-xml-report-.*-of-4
          name_is_regexp: true
          path: tmp/junit-xml-reports-downloaded
        continue-on-error: true

      - name: Resolve zero-based index for splitting tests
        id: offset-index
        run: echo "ZERO_BASED=$((${{ matrix.shard }}-1))" >> "$GITHUB_OUTPUT"

      - name: Determine tests splitting by timing
        uses: chaosaffe/split-tests@v1
        id: split-tests
        with:
          junit-path: tmp/junit-xml-reports-downloaded
          glob: integration_tests/tests/**/*.cy.ts
          split-index: ${{ steps.offset-index.outputs.ZERO_BASED }}
          split-total: 4

      - name: Run Integration tests
        run: TEST_RUN_ARGS="--spec $(echo ${{ steps.split-tests.outputs.test-suite }} | sed -E 's/ /,/g')" npm run test:integration

      - name: Fix Cypress JUnit XML reports
        run: script/fix-cypress-junit-xml

      - name: Upload Integration test report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-junit-xml-report-${{ matrix.shard }}-of-4
          path: test_results/cypress

      - name: Upload Integration test artefacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artefacts-${{ matrix.shard }}-of-4
          path: |
            integration_tests/videos
            integration_tests/screenshots

  build:
    name: Build docker image from hmpps-github-actions
    needs:
      - node_build
      - type_checking
      - linting
      - helm_lint
      - unit_test
      - integration_test
    if: github.ref == 'refs/heads/main' || inputs.environment == 'test'
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/docker_build.yml@v2
    with:
      docker_registry: ${{ inputs.docker_registry || 'ghcr.io' }}
      registry_org: ${{ inputs.registry_org || 'ministryofjustice' }}
      additional_docker_tag: ${{ inputs.additional_docker_tag }}
      push: ${{ inputs.push || true }}
      docker_multiplatform: ${{ inputs.docker_multiplatform || false }}

  deploy_dev:
    name: Deploy to the development environment
    needs:
      - build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature-dev-') || startsWith(github.head_ref, 'feature-dev-')
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2
    secrets: inherit
    with:
      environment: 'development'
      app_version: '${{ needs.build.outputs.app_version }}'

  deploy_test:
    name: Deploy to the test environment
    needs:
      - build
    if: github.ref == 'refs/heads/main' || inputs.environment == 'test'
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2
    secrets: inherit
    with:
      environment: 'test'
      app_version: '${{ needs.build.outputs.app_version }}'

  e2e_test:
    name: "E2E Environment Tests 🧪"
    needs:
      - deploy_dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature-test/') || startsWith(github.head_ref, 'feature-test/')
    strategy:
      fail-fast: false
      matrix:
        shard: [ 1, 2, 3, 4 ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run E2E Tests
        env:
          # TODO: Tidy this up!
          CAS1_E2E_ADMINISTRATOR_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_2_PASSWORD }}
          CAS1_E2E_ADMINISTRATOR_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_2_USERNAME }}
          CAS1_E2E_ASSESSOR_EMAIL: stuart.harrison2+test1@digital.justice.gov.uk
          CAS1_E2E_ASSESSOR_NAME: AP_USER TEST_1
          CAS1_E2E_ASSESSOR_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_PASSWORD }}
          CAS1_E2E_ASSESSOR_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_USERNAME }}
          CAS1_E2E_CRU_MEMBER_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_4_PASSWORD }}
          CAS1_E2E_CRU_MEMBER_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_4_USERNAME }}
          CAS1_E2E_DELIUS_USERNAME_TO_ADD_AND_DELETE: JOSEPHHOLLINSHEAD
          CAS1_E2E_EMERGENCY_ASSESSOR_NAME_TO_ALLOCATE_TO: AP_USER TEST_1
          CAS1_E2E_FUTURE_MANAGER_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_4_PASSWORD }}
          CAS1_E2E_FUTURE_MANAGER_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_4_USERNAME }}
          CAS1_E2E_PERSON_FOR_ADHOC_BOOKING_CRN: X349420
          CAS1_E2E_REPORT_VIEWER_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_2_PASSWORD }}
          CAS1_E2E_REPORT_VIEWER_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_2_USERNAME }}
          CAS1_E2E_USER_WITHOUT_ROLES_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_PASSWORD }}
          CAS1_E2E_USER_WITHOUT_ROLES_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_USERNAME }}
          HMPPS_AUTH_PASSWORD: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_PASSWORD }}
          HMPPS_AUTH_USERNAME: ${{ secrets.E2E_USER_DA_AP_USER_TEST_1_USERNAME }}
        run: npm run test:e2e:ci -- --shard=${{ matrix.shard }}/4

      - name: Upload Playwright report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: E2E-playwright-report-${{ matrix.shard }}-of-4
          path: playwright-report
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload failure artefacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: E2E-failure-artefacts-${{ matrix.shard }}-of-4
          path: test-results
          retention-days: 30
          if-no-files-found: ignore

  # TODO - uncomment when e2e tests run successfully
  # deploy_preprod:
  #   name: Deploy to pre-production environment
  #   needs: 
  #     - build
  #     - deploy_dev
  #     - e2e_test
  #   if: github.ref == 'refs/heads/main'
  #   uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2 # WORKFLOW_VERSION
  #   secrets: inherit
  #   with:
  #     environment: 'preprod'
  #     app_version: '${{ needs.build.outputs.app_version }}'

  # deploy_prod:
  #   name: Deploy to production environment
  #   needs: 
  #     - build
  #     - deploy_preprod
  #   if: github.ref == 'refs/heads/main'
  #   uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2 # WORKFLOW_VERSION
  #   secrets: inherit
  #   with:
  #     environment: 'prod'
  #     app_version: '${{ needs.build.outputs.app_version }}'
